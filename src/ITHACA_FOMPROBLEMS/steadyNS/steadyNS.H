/*---------------------------------------------------------------------------*\
     ██╗████████╗██╗  ██╗ █████╗  ██████╗ █████╗       ███████╗██╗   ██╗
     ██║╚══██╔══╝██║  ██║██╔══██╗██╔════╝██╔══██╗      ██╔════╝██║   ██║
     ██║   ██║   ███████║███████║██║     ███████║█████╗█████╗  ██║   ██║
     ██║   ██║   ██╔══██║██╔══██║██║     ██╔══██║╚════╝██╔══╝  ╚██╗ ██╔╝
     ██║   ██║   ██║  ██║██║  ██║╚██████╗██║  ██║      ██║      ╚████╔╝
     ╚═╝   ╚═╝   ╚═╝  ╚═╝╚═╝  ╚═╝ ╚═════╝╚═╝  ╚═╝      ╚═╝       ╚═══╝

 * In real Time Highly Advanced Computational Applications for Finite Volumes
 * Copyright (C) 2017 by the ITHACA-FV authors
-------------------------------------------------------------------------------
License
    This file is part of ITHACA-FV
    ITHACA-FV is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.
    ITHACA-FV is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
    GNU Lesser General Public License for more details.
    You should have received a copy of the GNU Lesser General Public License
    along with ITHACA-FV. If not, see <http://www.gnu.org/licenses/>.
Class
    steadyNS
Description
    Reduction class for a Stationary Navier-Stokes problem.
SourceFiles
    steadyNS.C
\*---------------------------------------------------------------------------*/

/// \file
/// Header file of the steadyNS class.
/// \dir
/// Directory containing the header and source files for the steadyNS class.

#ifndef steadyNS_H
#define steadyNS_H
#include "fvCFD.H"
#include "singlePhaseTransportModel.H"
#include "turbulentTransportModel.H"
#include "simpleControl.H"
#include "pisoControl.H"
#include "fvOptions.H"
#include "reductionProblem.H"
#include "ITHACAstream.H"
#include "ITHACAparameters.H"
#if OPENFOAM >= 1812
#include "ITHACAforces18.H"
#else
#include "ITHACAforces.H"
#endif
#include "volFields.H"
#include <iostream>
#include "IPstream.H"
#include "OPstream.H"
#include "Modes.H"

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

/*---------------------------------------------------------------------------*\
                        Class SteadyNS Declaration
\*---------------------------------------------------------------------------*/

/// Implementation of a parametrized full order <b> steady NS problem </b> and preparation of the the reduced matrices for the online solve.
/** In this class are implemented the methods for the offline solve of a steady NS problem
and the for the generation of the reduced matrices for subsequent online solve, this class is a son
of the reduction problem class */
class steadyNS: public reductionProblem
{


    public:
        // Constructors
        /// Null constructor
        steadyNS();

        /// Construct with argc and argv
        steadyNS(int argc, char* argv[]);
        ~steadyNS() {};

        ITHACAparameters* para;

        // Member Functions
        /// List of pointers used to form the pressure snapshots matrix
        PtrList<volScalarField> Pfield;
	PtrList<volScalarField> P0field;

        /// List of pointers used to form the velocity snapshots matrix
        PtrList<volVectorField> Ufield;
	PtrList<volVectorField> UStarfield;

	/// List of pointers used to form the online solutions
	PtrList<volScalarField> Pfield_on;
        PtrList<volVectorField> Ufield_on;

	/// List of pointers used to form the phi snapshots matrices
	PtrList<volScalarField> Udivfield;
	PtrList<volScalarField> Phidivfield;
        PtrList<surfaceScalarField> Phifield;
	PtrList<surfaceScalarField> PhiStarfield;

	/// Projection Peqn onto Pressure modes
	List<Eigen::MatrixXd> RedLinSysP;
	List<Eigen::MatrixXd> RedLinSysPDiff;
	List<Eigen::MatrixXd> RedLinSysPConv;

        /// List of pointers used to form the supremizer snapshots matrix
        PtrList<volVectorField> supfield;

        /// List of pointers used to form the pressure modes
        Modes<scalar> Pmodes;

        /// List of pointers used to form the velocity modes
        Modes<vector> Umodes;

        /// List of pointers used to form the supremizer modes
        Modes<vector> supmodes;

	/// List of pointers used to form the phi modes
	PtrList<surfaceScalarField> Phimodes;

        /// List of pointers used to form the list of lifting functions
        PtrList<volVectorField> liftfield;

        /// List of pointers used to form the homogeneous velocity snapshots
        PtrList<volVectorField> Uomfield;

        /// List of pointers containing the total number of lift, supremizer and velocity modes
        Modes<vector> L_U_SUPmodes;


	Modes<scalar> Pmodes0;

        /// Tolerance for the residual of the stationary problems, there is the same tolerance for velocity and pressure
        scalar tolerance;

        /// Number of maximum iterations to be done for the computation of the truth solution
        scalar maxIter;

        /// Number of velocity modes used for the projection
        label NUmodes;

        /// Number of pressure modes used for the projection
        label NPmodes;

        /// Number of supremizer modes used for the projection
        label NSUPmodes;

        /** @name Reduced Matrices
        *
        */
        ///@{


	///dimensionedScalar nu;
        autoPtr<dimensionedScalar> _nu;

        /// Diffusion term
        Eigen::MatrixXd B_matrix;
	Eigen::MatrixXd B2_matrix;
	Eigen::MatrixXd Bbc_matrix;

        /// Mass Matrix
        Eigen::MatrixXd M_matrix;
	Eigen::MatrixXd Mf_matrix;

        /// Gradient of pressure matrix
        Eigen::MatrixXd K_matrix;

	/// Flux of pressure matrix	
	Eigen::MatrixXd Kf_matrix;

	/// Matrices boundary vector
	Eigen::MatrixXd bw;
	Eigen::MatrixXd BC_matrix;
	Eigen::MatrixXd BC_matrix_PPE;
	Eigen::MatrixXd BC_matrix_PPE2;

        /// Non linear term
        List <Eigen::MatrixXd> C_matrix;
	List <Eigen::MatrixXd> Ci_matrix;
        Eigen::Tensor<double, 3 > C_tensor;
	Eigen::Tensor<double, 3 > Cf_tensor;
	Eigen::Tensor<double, 3 > Ci_tensor;

        /// Div of velocity
        Eigen::MatrixXd P_matrix;
	Eigen::MatrixXd Pp_matrix;
	Eigen::MatrixXd Pf_matrix;
	Eigen::MatrixXd PF_matrix;

        /// Laplacian term PPE
        Eigen::MatrixXd D_matrix;
	Eigen::MatrixXd DF_matrix;
	Eigen::MatrixXd Cf_matrix;
	Eigen::MatrixXd DFbc_matrix;

	/// Interpolation term
	Eigen::MatrixXd I_matrix;
	Eigen::MatrixXd ID_matrix;

        /// Divergence of momentum PPE
        List <Eigen::MatrixXd> G_matrix;

        /// Divergence of momentum PPE
        Eigen::Tensor<double, 3 > gTensor;
	Eigen::Tensor<double, 3 > gFTensor;

        /// PPE BC1
        Eigen::MatrixXd BC1_matrix;

        /// PPE BC2
        List <Eigen::MatrixXd> BC2_matrix;

        /// PPE BC2
        Eigen::Tensor<double, 3 > bc2Tensor;

        /// PPE BC3
        Eigen::MatrixXd BC3_matrix;

        /// PPE BC4
        Eigen::MatrixXd BC4_matrix;
        ///@}
        //

        /// Viscous forces
        Eigen::MatrixXd tauMatrix;

        /// Pressure forces
        Eigen::MatrixXd nMatrix;

        /// Boundary term for penalty method - vector
        List <Eigen::MatrixXd> bcVelVec;

        /// Boundary term for penalty method - matrix
        List <Eigen::MatrixXd> bcVelMat;


        // Other Variables
        /// Boolean variable to check the existence of the supremizer modes
        bool supex;

        /// Counter used for the output of the full order solutions
        label counter = 1;

        // Dummy variables to transform simplefoam into a class
        /// Pressure field
        autoPtr<volScalarField> _p;

        /// Velocity field
        autoPtr<volVectorField> _U;

        /// Initial Pressure field (for restart purposes)
        autoPtr<volScalarField> _p0;

        /// Initial Velocity field (for restart purposes)
        autoPtr<volVectorField> _U0;

 	/// Velocity field
        autoPtr<volVectorField> _Ub;

	/// SurfaceScalar field
        autoPtr<surfaceScalarField> _phib;
	autoPtr<surfaceScalarField> _phic;
        /// Mesh
        mutable autoPtr<fvMesh> _mesh;

        /// simpleControl
        autoPtr<simpleControl> _simple;

        /// fvOptions
        autoPtr<fv::options> _fvOptions;

        /// Time
        autoPtr<Time> _runTime;

        /// Flux
        autoPtr<surfaceScalarField> _phi;

        /// Initial Flux (for restart purposes)
        autoPtr<surfaceScalarField> _phi0;

        /// Turbulence model
        autoPtr<incompressible::turbulenceModel> turbulence;

        /// Laminar transport (used by turbulence model)
        autoPtr<singlePhaseTransportModel> _laminarTransport;

        /// MRF variable
        autoPtr<IOMRFZoneList> _MRF;

        /// Reference pressure cell
        label pRefCell;

        /// Reference pressure value
        scalar pRefValue;

        /// continuity error
        scalar cumulativeContErr = 0;

        /// Boundary Method
        word bcMethod;

	/// Explicit time discretization Method
        word ExplicitMethod;

	/// Poisson Method
        word PoissonMethod;

        // Functions

        //--------------------------------------------------------------------------
        /// @brief      Perform a truthsolve
        /// @param[in]  mu_now  The actual value of the parameter for this truthSolve. Used only
        /// to construct mu_interp matrix which is written out in the Offline folder, also for par file in
        /// the Parameters folder.
        ///
        void truthSolve(List<scalar> mu_now);

        ///
        /// solve the supremizer either with the use of the pressure snaphots or the pressure modes
        ///
        /// @param[in]  type  The type of the supremizer approach, either done on the pressure snapshots or on pressure modes.
        ///
        void solvesupremizer(word type = "snapshots");

        /// Perform a lift solve
        void liftSolve();

        // Wrapped Proj. Methods;

        //--------------------------------------------------------------------------
        /// Project using the Poisson Equation for pressure
        ///
        /// @param[in]  folder     The folder used to save the reduced matrices.
        /// @param[in]  NUmodes    The number of velocity modes.
        /// @param[in]  NPmodes    The number of pressure modes.
        /// @param[in]  NSUPmodes  The number of supremizer modes, 0 by default and it must remain always zero.
        ///
        void projectPPE(fileName folder, label NUmodes, label NPmodes,
                        label NSUPmodes = 0);

        //--------------------------------------------------------------------------
        /// Project using a supremizer approach
        ///
        /// @param[in]  folder     The folder used to save the reduced matrices.
        /// @param[in]  NUmodes    The number of velocity modes.
        /// @param[in]  NPmodes    The number of pressure modes.
        /// @param[in]  NSUPmodes  The number of supremizer modes.
        ///
        void projectSUP(fileName folder, label NUmodes, label NPmodes, label NSUPmodes);

        //--------------------------------------------------------------------------
        //  Projection Methods Momentum Equation
        /// Diffusive Term
        ///
        /// @param[in]  NUmodes    The number of velocity modes.
        /// @param[in]  NPmodes    The number of pressure modes.
        /// @param[in]  NSUPmodes  The number of supremizer modes.
        ///
        /// @return     reduced matrix in Eigen::MatrixXd format for the diffusion term.
        ///
        Eigen::MatrixXd diffusive_term(label NUmodes, label NPmodes, label NSUPmodes);
	Eigen::MatrixXd diffusive_term_BC(label NUmodes, label NPmodes, label NSUPmodes);

	Eigen::MatrixXd diffusive_diff_term(label NUmodes, label NPmodes, label NSUPmodes);
	Eigen::MatrixXd convective_flux_cross_term(label NUmodes, label NPmodes, label NSUPmodes);
	
	//--------------------------------------------------------------------------
        //  Projection Methods Momentum Equation
        /// Interpolation Term
        ///
        /// @param[in]  NUmodes    The number of velocity modes.
        /// @param[in]  NPmodes    The number of pressure modes.
        /// @param[in]  NSUPmodes  The number of supremizer modes.
        ///
        /// @return     reduced matrix in Eigen::MatrixXd format for the interpolation term.
        ///
	Eigen::MatrixXd interpolation_term(label NUmodes, label NPmodes, label NSUPmodes);
	Eigen::MatrixXd mass_matrix_flux(label NUmodes, label NPmodes, label NSUPmodes);
Eigen::MatrixXd interpolation_term_diffusion(label NUmodes, label NPmodes, label NSUPmodes);
        //--------------------------------------------------------------------------
        /// Gradient of pressure
        ///
        /// @param[in]  NUmodes    The number of velocity modes.
        /// @param[in]  NPmodes    The number of pressure modes.
        /// @param[in]  NSUPmodes  The number of supremizer modes.
        ///
        /// @return     reduced matrix in Eigen::MatrixXd format for the Gradient of pressure term.
        ///
        Eigen::MatrixXd pressure_gradient_term(label NUmodes, label NPmodes,
                                               label NSUPmodes);

	//--------------------------------------------------------------------------
        /// Gradient of pressure flux
        ///
        /// @param[in]  NUmodes    The number of velocity modes.
        /// @param[in]  NPmodes    The number of pressure modes.
        /// @param[in]  NSUPmodes  The number of supremizer modes.
        ///
        /// @return     reduced matrix in Eigen::MatrixXd format for the Gradient of pressure flux term.
        ///
	Eigen::MatrixXd pressure_flux_term(label NUmodes, label NPmodes,
                                               label NSUPmodes);
	//--------------------------------------------------------------------------
        /// Laplacian of pressure Linear System
        ///
        /// @param[in]  NUmodes    The number of velocity modes.
        /// @param[in]  NPmodes    The number of pressure modes.
        /// @param[in]  NSUPmodes  The number of supremizer modes.
        ///
        /// @return     reduced matrix in Eigen::MatrixXd format for the Laplacian of pressure Linear System.
        ///
	List < Eigen::MatrixXd > pressure_gradient_term_linsys(label NPmodes);
	List < Eigen::MatrixXd > pressure_gradient_term_linsys_diff(label NPmodes);
	List < Eigen::MatrixXd > pressure_gradient_term_linsys_conv(label NPmodes);

        //--------------------------------------------------------------------------
        /// Convective Term
        ///
        /// @param[in]  NUmodes    The number of velocity modes.
        /// @param[in]  NPmodes    The number of pressure modes.
        /// @param[in]  NSUPmodes  The number of supremizer modes.
        ///
        /// @return     reduced third order tensor in List <Eigen::MatrixXd> format for the convective term.
        ///
        List < Eigen::MatrixXd >  convective_term(label NUmodes, label NPmodes,
                label NSUPmodes);

	List < Eigen::MatrixXd >  convective_flux_int_mat(label NUmodes, label NPmodes,
                label NSUPmodes);



        //--------------------------------------------------------------------------
        /// Mass Term
        ///
        /// @param[in]  NUmodes    The number of velocity modes.
        /// @param[in]  NPmodes    The number of pressure modes.
        /// @param[in]  NSUPmodes  The number of supremizer modes.
        ///
        /// @return     reduced matrix in Eigen::MatrixXd format for the mass matrix.
        ///
        Eigen::MatrixXd  mass_term(label NUmodes, label NPmodes, label NSUPmodes);

	//--------------------------------------------------------------------------
        /// Boundary Term
        ///
        /// @param[in]  NUmodes    The number of velocity modes.
        /// @param[in]  NSUPmodes  The number of supremizer modes.
        ///
        /// @return     reduced matrix in Eigen::MatrixXd format for the mass matrix.
        ///
	Eigen::MatrixXd  boundary_term(label NUmodes, label NSUPmodes);
	Eigen::MatrixXd  boundary_term_PPE(label NPmodes);
	Eigen::MatrixXd  boundary_term_PPE2(label NPmodes);

        // Projection Methods Continuity Equation

        //--------------------------------------------------------------------------
        /// Divergence Term (supremizer approach)
        ///
        /// @param[in]  NUmodes    The number of velocity modes.
        /// @param[in]  NPmodes    The number of pressure modes.
        /// @param[in]  NSUPmodes  The number of supremizer modes.
        ///
        /// @return     reduced matrix in Eigen::MatrixXd format for the divergence term.
        ///
        Eigen::MatrixXd divergence_term(label NUmodes, label NPmodes, label NSUPmodes);

	Eigen::MatrixXd divergence_term_pressure(label NUmodes, label NPmodes, label NSUPmodes);

	//--------------------------------------------------------------------------
        /// Divergence flux Term 
        ///
        /// @param[in]  NUmodes    The number of velocity modes.
        /// @param[in]  NPmodes    The number of pressure modes.
        /// @param[in]  NSUPmodes  The number of supremizer modes.
        ///
        /// @return     reduced matrix in Eigen::MatrixXd format for the divergence flux term.
        ///
	Eigen::MatrixXd divergence_flux_term(label NUmodes, label NPmodes, label NSUPmodes);

	//--------------------------------------------------------------------------
        /// Divergence source Term 
        ///
        /// @param[in]  NUmodes    The number of velocity modes.
        /// @param[in]  NPmodes    The number of pressure modes.
        /// @param[in]  NSUPmodes  The number of supremizer modes.
        ///
        /// @return     reduced matrix in Eigen::MatrixXd format for the divergence flux term.
        ///
	Eigen::MatrixXd divergence_source_term(label NUmodes, label NPmodes, label NSUPmodes);

        //--------------------------------------------------------------------------
        /// Divergence of convective term (PPE approach)
        ///
        /// @param[in]  NUmodes    The number of velocity modes.
        /// @param[in]  NPmodes    The number of pressure modes.
        ///
        /// @return     reduced third order tensor in List <Eigen::MatrixXd> format for the divergence of conv. term (used only with a PPE approach).
        ///
        List < Eigen::MatrixXd > div_momentum(label NUmodes, label NPmodes);


        ///
        /// @brief      Divergence of convective term (PPE approach)
        ///
        /// @param[in]  NUmodes    The number of velocity modes.
        /// @param[in]  NPmodes    The number of pressure modes.
        ///
        /// @return     reduced third order tensor for the conv. term which is used for the PPE approach
        ///
        Eigen::Tensor<double, 3 > divMomentum(label NUmodes, label NPmodes);

	///
        /// @brief      Divergence of convective term (PPE approach)
        ///
        /// @param[in]  NUmodes    The number of velocity modes.
        /// @param[in]  NPmodes    The number of pressure modes.
        ///
        /// @return     reduced third order tensor for the conv. term which is used for the PPE approach
        ///
        Eigen::Tensor<double, 3 > divMomentumConvection(label NUmodes, label NPmodes);

        //--------------------------------------------------------------------------
        /// Laplacian of pressure term (PPE approach)
        ///
        /// @param[in]  NPmodes    The number of pressure modes.
        ///
        /// @return     reduced matrix in Eigen::MatrixXd format for the laplacian of pressure.
        ///
        Eigen::MatrixXd laplacian_pressure(label NPmodes);

	Eigen::MatrixXd laplacian_pressure_FOM(label NUmodes, label NPmodes);
	Eigen::MatrixXd laplacian_pressure_bc(label NUmodes, label NPmodes, label NSUPmodes);

        //--------------------------------------------------------------------------
        /// @brief      Term N° 1 given by the additional boundary condition using a PPE approach
        ///
        /// @param[in]  NUmodes    The number of velocity modes.
        /// @param[in]  NPmodes    The number of pressure modes.
        ///
        /// @return     reduced matrix in Eigen::MatrixXd format for the BC1 using a PPE approach.
        ///
        Eigen::MatrixXd pressure_BC1(label NPmodes, label NUmodes);

        //--------------------------------------------------------------------------
        /// @brief      Term N° 2 given by the additional boundary condition using a PPE approach
        ///
        /// @param[in]  NPmodes  The number of pressure modes.
        /// @param[in]  NUmodes  The number of velocity modes.
        ///
        /// @return     reduced matrix in Eigen::MatrixXd format for the BC2 using a PPE approach.
        ///
        List < Eigen::MatrixXd > pressure_BC2(label NPmodes, label NUmodes);

        //--------------------------------------------------------------------------
        /// @brief      Term N° 2 given by the additional boundary condition using a PPE approach
        ///
        /// @param[in]  NPmodes  The n pmodes
        /// @param[in]  NUmodes  The n umodes
        ///
        /// @return     reduced tensor in Eigen::MatrixXd format for the BC2 using a PPE approach.
        ///
        Eigen::Tensor<double, 3 > pressureBC2(label NPmodes, label NUmodes);

        //--------------------------------------------------------------------------
        /// @brief      Term N° 3 given by the additional boundary condition using a PPE approach
        ///
        /// @param[in]  NPmodes  The number of pressure modes.
        /// @param[in]  NUmodes  The number of velocity modes.
        ///
        /// @return     reduced tensor in Eigen::MatrixXd format for the BC3 using a PPE approach.
        ///
        Eigen::MatrixXd pressure_BC3(label NPmodes, label NUmodes);

        //--------------------------------------------------------------------------
        /// @brief      Term N° 4 given by the additional boundary condition using a PPE approach
        ///     for time-dependent BCs
        ///
        /// @param[in]  NPmodes  The number of pressure modes.
        /// @param[in]  NUmodes  The number of velocity modes.
        ///
        /// @return     reduced tensor in Eigen::MatrixXd format for the BC3 using a PPE approach.
        ///
        Eigen::MatrixXd pressure_BC4(label NPmodes, label NUmodes);

        //--------------------------------------------------------------------------
        /// @brief      Boundary integral modes on boundary used by the penaly method
        ///
        /// @param[in]  NUmodes    The number of velocity modes.
        /// @param[in]  NSUPmodes  The number of supremizer modes.
        ///
        /// @return     reduced third order tensor in List <Eigen::MatrixXd> format for the penalty method.
        ///
        List< Eigen::MatrixXd > bcVelocityVec(label NUmodes, label NSUPmodes);

        //--------------------------------------------------------------------------
        /// @brief      Boundary integral modes on boundary used by the penaly method
        ///
        /// @param[in]  NUmodes    The number of velocity modes.
        /// @param[in]  NSUPmodes  The number of supremizer modes.
        ///
        /// @return     reduced third order tensor in List <Eigen::MatrixXd> format for the penalty method.
        ///
        List< Eigen::MatrixXd > bcVelocityMat(label NUmodes, label NSUPmodes);

        //--------------------------------------------------------------------------
        /// Function to change the viscosity
        ///
        /// @param[in]  mu    viscosity (scalar)
        ///
        void change_viscosity(double mu);

        //--------------------------------------------------------------------------
        /// @brief      Compute lift and drag matrices
        ///
        /// @param[in]  NUmodes    The N of velocity modes
        /// @param[in]  NPmodes    The N of pressure modes
        /// @param[in]  NSUPmodes  The N of supremizer modes
        ///
        void forcesMatrices(label NUmodes, label NPmodes, label NSUPmodes);

        //--------------------------------------------------------------------------
        /// @brief      Compute lift and drag matrices offline matrices for the case of same number of velocity
        /// and pressure modes
        ///
        /// @param[in]  nModes  The number of modes used in the online stage for all reduced variables
        ///
        void forcesMatrices(label nModes);

        //--------------------------------------------------------------------------
        /// @brief      Export convective term as a tensor
        ///
        /// @param[in]  NUmodes    The N of velocity modes
        /// @param[in]  NPmodes    The N of pressure modes
        /// @param[in]  NSUPmodes  The N of supremizer modes
        ///
        /// @return     tensor_C
        ///
        Eigen::Tensor<double, 3 > convective_term_tens(label NUmodes,
                label NPmodes,
                label NSUPmodes);

	//--------------------------------------------------------------------------
        /// @brief      Export convective flux term as a tensor
        ///
        /// @param[in]  NUmodes    The N of velocity modes
        /// @param[in]  NPmodes    The N of pressure modes
        /// @param[in]  NSUPmodes  The N of supremizer modes
        ///
        /// @return     tensor_Cf
        ///	
	Eigen::Tensor<double, 3 > convective_flux_tens(label NUmodes,
                label NPmodes, label NSUPmodes);

	Eigen::Tensor<double, 3 > convective_flux_int_tens(label NUmodes,
                label NPmodes, label NSUPmodes);

        /// set U and P back to the values into the 0 folder
        void restart();


};

#endif










